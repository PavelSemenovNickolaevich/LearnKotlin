package theory.`2_Inheritance`

/*

Для расширения существующего функционала (создания нового класса на основе другого класса) можно использовать несколько подходов:
- если объект подходит по смыслу "is-a" ("является"), то применяем наследование (дочерний класс -> родительский класс)
- если объект подходит по смыслу "has-a" ("содержит"), то применяем ассоциацию

Ассоциация - внедряем один объект в другой (объект содержит ссылку на другой объект):
- композиция - внутренний объект не может существовать без внешнего (нога человека)
- агрегация - внутренний объект может существовать без внешнего (студент переходит из одного кабинета в другой)


Можно применять одновременно: наследование и ассоциацию (композицию)


 */



// правой кнопкой -> Run
// можете комментировать определенные строки функции и заново запускать проект, чтобы не запутаться при выводе результатов
fun main() {

    // внутренние объекты комнаты
    var table = Table()
    var bed = Bed()

    // комната - контейнер объектов
    var room = Room(table, bed) // передаем объекты (компилятор требует)

    room.create()

}


// строим Room как конструктор с помощью других объектов
class Room(var table: Table, var bed: Bed) { // комната - содержит стол и кровать (композиция, "has" - содержит)

    fun create() {
        table.create()
        bed.create()
    }

}

class Table { // стол

    fun create() {
        println("create table")
    }

}


class Bed { // кровать

    fun create() {
        println("create bed")
    }

}

