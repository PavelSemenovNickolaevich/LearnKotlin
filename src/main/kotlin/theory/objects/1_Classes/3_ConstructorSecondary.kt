package theory.`1_Classes`


/*

в Kotlin различают:

1) primary constructor - один - (первичный конструктор) - ПК (сокращение для удобства)
    - указывается сразу при описании класса только 1 раз
    - в нем обычно перечислены те переменные, которые обязательно должны быть заполнены (по логике работы объекта)

2) secondary constructors - может быть несколько (вторичные конструкторы) - ВК (сокращение для удобства)
    - указываются внутри класса в любом количестве
    - часто это необязательные, доп. переменные (в дополнение к основным), без которых объект может корректно работать


 ВК должен быть обязательно связан с ПК (явно или неявно)


 */


fun main() {

//    var anna = Anna(20, "Anna")
//
//    var james = James(15)
//
//    var mike = Mike()

    var goodwin = Goodwin(10, "Good")
    goodwin.printText("test text")


}

class Anna(var name: String) { // автоматически создается ПК без параметров

    var age = 10 // компилятор видит, что в переменную age присваивается значение внутри конструктора, поэтому нет ошибки "Property must be initialized or be abstract"

    constructor (age: Int, name: String) : this(name) { // ВК - явно вызывает ПК
        this.age = age
    }

}

class James { // автоматически НЕ создается ПК без параметров, т.к. добавлен ВК

    var age: Int // компилятор видит, что age в любом случае будет проинициализирован в ВК (т.к. это единственный способ создать объект)

    var address = "104 street" // переменная нигде в конструкторах не участвует, но присвоено значение по-умолчанию, поэтому компилятор не выдает ошибку "Property must be initialized or be abstract"

    constructor(age: Int) { // явно не вызываем ПК
        this.age = age
    }

}


// такой класс создавать не рекомендуется, но нужно иметь в виду особенности синтаксиса (многие новички путаются)
class Mike() { // если указали пустые скобки после названия класса (ПК без параметров) - то обязательно надо явно вызывать ПК из ВК

    var age: Int = 100

    constructor(age: Int) : this() { // ВК явно вызывает свой ПК без параметров
    }

}


// блоки init

class Goodwin(var name: String) {

    var age: Int = 100

    // блоки init вызываются после ПК (ВК отработают после всех блоков init)
    // блоков init может быть любое количество (не рекомендуется больше 1-3) - вызываются в порядке следования в коде (сверху вниз)
    // нежелательно нагружать лишней логикой или большим кодом - добавляйте только то, что связано c инициализацией объекта
    init {
        println("init 1")

        this.name = this.name + " changed" // в блоках init можно обращаться к переменным класса

        printText(this.name) // можно вызывать функции (и выполнять любой другой код)
    }

    init {
        println("init 2")
    }

    constructor(age: Int, name: String) : this(name) { // ВК (вызывается после ПК и блоков init)
        this.age = age;
        println("secondary constructor")
    }

    fun printText(str: String) {
        println("str = $str")
    }
}
