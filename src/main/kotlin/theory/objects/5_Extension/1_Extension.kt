package theory.`5_Extension`


/*

extensions (расширения) - когда нужно добавить функционал в существующий класс без изменения самого класса.

В Java обычно такая задача решалась только наследованием от класса и добавлением нового метода (слишком много кода получалось), либо использовать паттерн Decorator

В Kotlin добавлено готовое решение: extension.

Позволяет добавлять функционал уже в готовый класс, не изменяя сам класс.

---

Расширение по смыслу похоже на наследование - вы добавляете функционал в уже существующий класс.

Когда использовать наследование:
- нужно добавить много функционала
- нужно добавить новые переменные
- когда новый класс наследника используется в коде как тип (переменной, функции и пр.) (Human - Mike)

Когда использовать extension:
- нужно добавить только функции или get/set к существующему классу
- функционал небольшой




 */



// правой кнопкой -> Run
// можете комментировать определенные строки функции и заново запускать проект, чтобы не запутаться при выводе результатов
fun main() {

    var tea = Tea("sweet", "good tea")

    println(tea.concatTasteAndName()) // можем вызывать функции, как будто они находятся в самом классе Tea

    println(tea.nameLength()) // функция может возвращать любой результат

    tea.drinkAndSleep()

    println(tea.bigName)

}





class Tea(var taste: String, var name: String) {

    fun drink() {
        println("drink")
    }

}

// Добавили функцию в готовый класс, не изменяя код самого класса - для этого нужно написать название класса и объявить название функции
// Функция может обращаться к переменным класса
fun Tea.concatTasteAndName() = "$taste $name"  // сокращенная запись без фигурных скобок и со знаком "=", т.к. просто возвращается одно выражение

// функция использует больше одного оператора - поэтому нужны фигурные скобки ("=" уже не используется)
fun Tea.nameLength(): Int {
    println("extension method")
    return name.length
}

// функция может ничего не возвращать
fun Tea.drinkAndSleep() {
    drink() // можно вызывать функции класса
    println("sleep")
}


// можно добавлять переменные, константы, get/set (которые по сути тоже являются функциями)
val Tea.bigName: Boolean
    get() = name.length>10 // если имя больше 10 символов - считаем его большим

