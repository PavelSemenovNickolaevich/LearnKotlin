package theory.syntax.`8_Nulls`

/*

В Kotlin и других современных языках - более строгий подход к null.

Nullable типы - это те типы (переменных, функций и пр.), которые могут принимать null в качестве значения

Для того, чтобы переменная могла принимать значение null - в Kotlin нужно в конце типа указать знак "?" (можно применять не только для переменных, но и везде где указывается тип)

Самая частая ошибка в любом Java приложении: NullPointerException - означает, что пытаемся обратиться по ссылке, где нет объекта (пытаемся работать с несуществующим объектом)

Kotlin (и многие современные языки) обязывает явно указывать при объявлении переменной - может ли она быть null.

в зависимости от этого компилятор будет вести себя по разному:
- либо не допускать присвоения null в переменную
- либо (если переменная допускает null) каждый раз при использовании - проверять на null

Тем самым компилятор заставляет аккуратно работать со всеми переменными и исключает ошибку NullPointerException (если только мы сами ее не вызовем)

https://kotlinlang.org/docs/reference/null-safety.html

Главные цели:
- не исключить присвоения null, а не допускать ошибки NullPointerException
- проверять на этапе компиляции, а не уже во время работы приложения (NullPointerException)


Nullable типы часто называют wrapper'ом - т.е. оберткой (контейнером) для обычного типа (которая может принимать как значение, так и null) - аналог Optional в Java


Примечание: создавайте nullable типы ТОЛЬКО тогда, когда по смыслу и по задаче выражение (переменная, функция) может иметь значение null

 */



// правой кнопкой -> Run
// можете комментировать определенные строки функции и заново запускать проект, чтобы не запутаться при выводе результатов
fun main() {


    var name:String? // ? означает, что переменная nullable (может иметь null) - теперь в коде компилятор всегда будет делать проверку при использовании этой переменной
    name = null // разрешается присвоение null, компилятор не ругается

    // ? означает "if (name != null)"
    println(name?.length) // если name==null, то length не будет вызываться (таким образом не будет ошибки NullPointerException) и распечатается просто null

//    printText(name) // ошибка компилятора: String и String?  - это разные типы

    // можно также вручную проверять переменную на null - аналог записи выше
    if (name != null) {
        println(name.length) // здесь уже не нужно добавлять ? , т.к. компилятор видит, что мы сначала выполнили проверку на null с помощью if
    }


   // так называемый "элвис-оператор" ?:  (похоже на глаза с прической) - используется для проверки и присвоения значения
    var len = name?.length ?: 0 // если name!=null, то в переменную len присвоится name.length, иначе присвоится 0

//    if (name != null){
//        len = name.length
//    }else{
//        len = 0;
//    }


}


fun printText(text: String){
    println(text)
}
