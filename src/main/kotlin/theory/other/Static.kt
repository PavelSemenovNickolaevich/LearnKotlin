package theory

/*

"Companion object" - для реализации статичных элементов (аналогично "static" в Java)

К статичным элементам можно обращаться без создания объектов. Они привязаны не к объекту (экземпляру), а к классу.

В класс разрешается добавлять только один companion, поэтому все (статичные) функции, переменные - должны быть описаны в одном companion объекте

Также - все функции или переменные/константы, которые объявлены на уровне файла (а не внутри класса) являются статичными по-умолчанию - можем обращаться к ним напрямую.

Если функция или переменная объявлена на уровне файла - в другом файле/классе можно обратиться к ней, предварительно выполнив import.

https://kotlinlang.org/docs/object-declarations.html#companion-objects

 */


var name = "test" // статичная переменная, имеем к ней доступ напрямую из любого файла/класса


// правой кнопкой -> Run
// можете комментировать определенные строки функции и заново запускать проект, чтобы не запутаться при выводе результатов
fun main() {


    // для обращение к нестатичным функциям, переменным - нужно сначала создать объект
    var door = Door()
    door.open()
    door.color = "black"

    Door.close() // можно вызывать функцию без создания экземпляра Door (статичный метод в Java)
    Door.Utils.close() // можем также использовать имя companion (необязательно) - компилятор предлагает удалить это лишнее (redundant) слово

    println(Door.name) // можно обращаться к переменной без создания экземпляра Door (статичная переменная в Java)




}





class Door {

    var color: String = "white" // это переменная - к ней можем обратиться только после создания экземпляра Door

    fun open() { // это функция - к ней можем обратиться только после создания экземпляра Door
        println("open")
    }


    // позволяет описывать статичные функции и переменные
    companion object Utils { // название может быть любым (можно не добавлять)

        // companion object не может обращаться к переменным внешнего класса Door, т.к. они не статичные (привязаны к объекту)

        var name = "door name"; // статичная переменная

        fun close() { // статичная функция
            println("close")
        }
    }


}


