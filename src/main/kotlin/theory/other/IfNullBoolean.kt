package theory.`8_Nulls`

/*

Примеры условий if для переменных, которые допускают null

Применение оператора !! для конвертации в not-null значение (которая может привести к ошибке Null pointer).


 */

// правой кнопкой -> Run
// можете комментировать определенные строки функции и заново запускать проект, чтобы не запутаться при выводе результатов
fun main() {

    // Пример 1 - тип Boolean (без вопроса в конце)

    // тип переменной автоматически определен как Boolean (чтобы убедиться нажмите Alt + колесико мыши)
    var value = true // может принимать только true или false (null не допускается)

    if (value) {} // такая запись верна (компилятор не ругается) - означает if (value == true)

    if (!value) {} // отрицание с помощью !, такая запись тоже верна (компилятор не ругается) - означает if (value != true)




    // Пример 2 - тип Boolean?  (с вопросом в конце)

    var flag: Boolean?  = true // может принимать 3 значения: true, false, null - меняйте значение, чтобы проверить выполнение кода ниже

    // Если хотим проверить значения, то обычная запись if уже не подойдет, т.к. возможно значение null (а не только true или false)
//    if (flag) {} // раскоментируйте для просмотра ошибки  - компилятор ругается, требует Boolean, а получил Boolean?

    // правильная запись - проверка на true
    if (flag != true){ // если значение flag равно null, то это условие все равно выполнится
        println("Проверка на true, flag = $flag")
    }


    // правильная запись - проверка на false или null
    if (flag != null && flag != false){
        println("Проверка на false или null, flag = $flag")
    }

    // Оператор !! явно (и опасно) конвертирует значение в not-null тип Boolean, поэтому можем использовать обычную запись if (flag)
    // Используйте оператор !! только если полностью уверены, что переменная не равна null
    if (flag!!){ // если flag == null, то выйдет ошибка KotlinNullPointerException
        println("Оператор !!, flag = $flag")
    }


    // оператор !! часто в других языках называют распаковкой (unwrapping) - открываем контейнер и получаем оттуда значение (или null)



}
